// pid_controller.cpp
#include "pid_controller.h"
#include <Arduino.h>
#include <stdint.h>
#include <Wire.h>

PIDController::PIDController(float p, float i, float d, float pp, float pi, float pd, float sp, float si, float sd) : 
    kp(p), ki(i), kd(d),
    kp_pos(pp), ki_pos(pi), kd_pos(pd),
    kp_speed(sp), ki_speed(si), kd_speed(sd),
    setpoint(0), lastError(0), integral(0),
    posSetpoint(0), lastPosError(0), posIntegral(0),
    speedSetpoint(0), lastSpeedError(0), speedIntegral(0) {
}

void PIDController::init() {
    lastTime = millis();
    reset();
}

float PIDController::compute(float currentAngle, float currentPosition, float currentSpeed) {
    unsigned long now = millis();
    float deltaTime = (now - lastTime) / 1000.0;
    lastTime = now;
    
    // Angle PID
    float angleError = currentAngle - setpoint;
    float pTerm = kp * angleError;
    
    integral += angleError * deltaTime;
    integral = constrain(integral, -maxIntegral, maxIntegral);
    float iTerm = ki * integral;
    
    float angleDerivative = (angleError - lastError) / deltaTime;
    float dTerm = kd * angleDerivative;
    lastError = angleError;
    
    // Position PID
    float posError = currentPosition - posSetpoint;
    float pTermPos = kp_pos * posError;
    
    posIntegral += posError * deltaTime;
    posIntegral = constrain(posIntegral, -maxIntegral, maxIntegral);
    float iTermPos = ki_pos * posIntegral;
    
    float posDerivative = (posError - lastPosError) / deltaTime;
    float dTermPos = kd_pos * posDerivative;
    lastPosError = posError;
    
    // Speed PID
    float speedError = currentSpeed - speedSetpoint;
    float pTermSpd = kp_speed * speedError;
    
    speedIntegral += speedError * deltaTime;
    speedIntegral = constrain(speedIntegral, -maxIntegral, maxIntegral);
    float iTermSpeed = ki_speed * speedIntegral;
    
    float speedDerivative = (speedError - lastSpeedError) / deltaTime;
    float dTermspeed = kd_speed * speedDerivative;
    lastSpeedError = speedError;

    // Combine both controls
    float output = (pTerm + iTerm + dTerm) + (pTermPos + iTermPos + dTermPos) + (pTermSpd + iTermSpeed + dTermspeed);
    
    // Limit output
    output = constrain(output, -maxOutput, maxOutput);
    
    return output;
}

void PIDController::reset() {
    integral = 0;
    lastError = 0;
    posIntegral = 0;
    lastPosError = 0;
    speedIntegral = 0;
    lastSpeedError = 0;
}

void PIDController::setTunings(float p, float i, float d, float pp, float pi, float pd, float sp, float si, float sd) {
    kp = p;
    ki = i;
    kd = d;
    kp_pos = pp;
    ki_pos = pi;
    kd_pos = pd;
    kp_speed = sp; 
    ki_speed = si;
    kd_speed = sd;
}